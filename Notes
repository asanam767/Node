💡 Key Difference:
Cookies = Stored on your browser (remembers info even after closing the site).
Sessions = Stored on the server (temporary and ends when you log out or close the browser).
⏳ Can Sessions Be Stored in Cookies?
Yes! Websites can store session IDs inside cookies to track users across visits. This is called a session cookie.

Would you like a real-world analogy to make it even clearer? 😊

---------------------------------------------------------------------------------------------------------------------------------------------

🔑 Authentication vs. Authorization
1️⃣ Authentication (Who are you?)

It's the first step where you prove who you are.
Example: Logging in with your username & password.
Think of it like showing your ID card to enter a building.
2️⃣ Authorization (What can you access?)

After authentication, the system checks what you're allowed to do.
Example: Even after logging in, a normal user can't access admin features.
Think of it like having a VIP pass that lets you enter only certain rooms.
🔥 Key Difference:
Authentication = Are you the right person? (Login step ✅)
Authorization = What are you allowed to do? (Permissions check ✅)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Tokens:
🔥 Why Are Tokens Better Than Cookies for Authentication?
✅ Tokens (like JWT - JSON Web Tokens) are self-contained

Once issued, they contain all the needed information.
No need to check the database every time.
They are verified using a secret key (for HMAC) or a public-private key pair (for RSA).
✅ Cookies require database lookups

Traditional session-based authentication stores session IDs in cookies.
Each time a user makes a request, the server must fetch session data from the database.
This creates extra load on the server.
✅ Tokens are stateless

The server doesn’t store any session data.
The user sends the token with each request, and the server just verifies it using the secret key.
This makes it faster and scalable.
✅ Tokens work across different servers (better for microservices)

Since they don’t depend on server storage, you can use them across multiple servers or APIs without issues.
Useful for mobile apps, third-party integrations, and Single Sign-On (SSO).
But Cookies Still Have Some Advantages
More secure by default (especially when using HTTP-Only, Secure, and SameSite flags).
Easier to implement for simple applications.
Better protection against Cross-Site Request Forgery (CSRF) because they are tied to the domain.
When to Use What?
🔹 Use Tokens (JWT) if you need:
✅ Scalable, stateless authentication.
✅ Multi-server or microservices setup.
✅ Mobile apps or APIs needing authentication.

🔹 Use Cookies (Session-based) if you:
✅ Want better security with HTTP-only and Secure flags.
✅ Are working on a traditional web app with fewer authentication needs.
✅ Need automatic session management (handled by browsers).

🚀 Conclusion: Tokens (JWT) are generally better for modern web apps and APIs because they remove database dependency. But cookies still work well for traditional session-based authentication.
-------------------------------------------------------------------------------------------------------------------------------------
1. **User Sends Request with Token**
When the user logs in, they receive a token (usually a JWT).
Every time the user makes subsequent requests to the server (for protected routes or resources), they send this token as part of the Authorization header in their request:
makefile
Copy
Edit
Authorization: Bearer <token>
2. Server Extracts and Verifies the Token
The server, through middleware (like the jwtAuthMiddleware you shared), extracts the token from the Authorization header.
The server then checks if the token exists. If it doesn’t, the server sends a 401 Unauthorized response, indicating that authentication is required.
If the token exists, the server verifies it. Typically, the server uses a secret key to verify that the token was actually issued by the server and has not been tampered with.
If the token is valid (i.e., it hasn’t expired, and it matches the server’s secret key), the server can trust the user is authenticated.
If the token is invalid (expired, tampered, or incorrect), the server sends a 403 Forbidden response.
3. Proceed with the Request
If the token is valid, the server proceeds to handle the request (e.g., retrieving data, processing an action) and sends a response back to the client.
If the token is invalid or missing, the request is denied, and the client cannot proceed.
Summary:
User -> Sends token -> Server (JWT middleware) -> Verifies token -> If valid, proceed with request; if not, return error.
